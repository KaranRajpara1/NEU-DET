# -*- coding: utf-8 -*-
"""Project_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1p6zVxgSLbzknzPwo3pb2W8n_4E6P_mA8
"""

from google.colab import drive

drive.mount('/content/drive')

cd /content/drive/"MyDrive/Machine Learning/NEU-DET-2/train/images/crazing"

ls

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

image_list = np.zeros(shape=(1440,40000))
output_class = np.zeros(shape=(1440))
count = 0

# output_class = 0 => crazing
# output_class = 1 => inclusion
# output_class = 2 => patches
# output_class = 3 => pitted_surface
# output_class = 4 => rolled-in_scale
# output_class = 5 => scratches

# working
import glob
import cv2
from skimage.io import imread, imshow
path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/train/images/crazing/*.jpg"

#print(path)

for file in glob.glob(path):
   print(file)
   #a= cv2.imread(file)
   #print(a)
   image = imread(file, as_gray=True) 
   #image_list.append(image)
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   image_list[count] = features
   output_class[count] = 0
   count += 1

print(image_list[0])
print(image_list[239])

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/train/images/inclusion/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   image_list[count] = features
   output_class[count] = 1
   count += 1

print(image_list[0])
print(image_list[239])
print(image_list[240])
print(image_list[479])

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/train/images/patches/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   image_list[count] = features
   output_class[count] = 2
   count += 1

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/train/images/pitted_surface/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   image_list[count] = features
   output_class[count] = 3
   count += 1

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/train/images/rolled-in_scale/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   image_list[count] = features
   output_class[count] = 4
   count += 1

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/train/images/scratches/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   image_list[count] = features
   output_class[count] = 5
   count += 1

print(count)

# for i in image_list :
#     print(i)
print(image_list.shape)
print(image_list[0].shape)
print(type(image_list))
print(image_list[0])
print(image_list[1439])

print(output_class)
print(output_class.shape)
print(output_class[0])
print(output_class[1439])
print(output_class[479])

# testing
test_list = np.zeros(shape=(360,40000))
output_predict_class = np.zeros(shape=(360))
count2 = 0

# output_class = 0 => crazing
# output_class = 1 => inclusion
# output_class = 2 => patches
# output_class = 3 => pitted_surface
# output_class = 4 => rolled-in_scale
# output_class = 5 => scratches

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/validation/images/crazing/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   test_list[count2] = features
   output_predict_class[count2] = 0
   count2 += 1

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/validation/images/inclusion/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   test_list[count2] = features
   output_predict_class[count2] = 1
   count2 += 1

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/validation/images/patches/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   test_list[count2] = features
   output_predict_class[count2] = 2
   count2 += 1

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/validation/images/pitted_surface/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   test_list[count2] = features
   output_predict_class[count2] = 3
   count2 += 1

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/validation/images/rolled-in_scale/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   test_list[count2] = features
   output_predict_class[count2] = 4
   count2 += 1

path = "/content/drive/MyDrive/Machine Learning/NEU-DET-2/validation/images/scratches/*.jpg"


for file in glob.glob(path):
   image = imread(file, as_gray=True) 
   features = np.reshape(image, (image.shape[0]*image.shape[1]))
   test_list[count2] = features
   output_predict_class[count2] = 5
   count2 += 1

count2



from sklearn.ensemble import RandomForestRegressor

rf=RandomForestRegressor(n_estimators=100,random_state=42)

rf.fit(image_list,output_class)

# evaluating with training dataset
predictions=rf.predict(image_list)

predictions

from sklearn.metrics import classification_report, confusion_matrix
from sklearn.metrics import accuracy_score

#y_pred = rbf_svc.predict(image_list)
print("Decision tree with 100 trees", accuracy_score(output_class,predictions))

print(confusion_matrix(output_class, predictions))
print(classification_report(output_class, predictions))
print(accuracy_score(output_class,predictions))

errors=abs(predictions-output_class)
errors

#Mean absolute percentage error
mape=100*(errors/output_class)

mean_error=np.mean(mape)
mean_error

accuracy=100-mean_error
accuracy







from sklearn.ensemble import RandomForestClassifier

#Create a Gaussian Classifier
clf=RandomForestClassifier(n_estimators=50)

#Train the model using the training sets y_pred=clf.predict(X_test)
clf.fit(image_list,output_class)

y_pred=clf.predict(image_list)

#Import scikit-learn metrics module for accuracy calculation
from sklearn import metrics
# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(output_class, y_pred))

y_pred_test = clf.predict(test_list)

print("Accuracy:",metrics.accuracy_score(output_predict_class, y_pred_test))